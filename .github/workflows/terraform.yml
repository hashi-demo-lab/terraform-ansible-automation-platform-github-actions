name: tfc-api-driven-workflow
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      # Replace with your directory, relative to the root of the project
      - 'terraform/**.tf'

env:
  # No need to pass as inputs to each action
  TF_CLOUD_ORGANIZATION: "hashi-demos-apj"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: "my-workspace"
  TF_DIRECTORY: "./terraform"
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  terraform-api-driven:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: hashicorp/tfc-workflows-github
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: false
          path: ./.github/actions/tfc-workflows-github

      - uses: ./.github/actions/tfc-workflows-github/actions/upload-configuration/
        name: Upload configuration version
        id: upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.TF_DIRECTORY }}
          
      - uses: ./.github/actions/tfc-workflows-github/actions/create-run/
        name: Run Terraform Plan
        continue-on-error: true
        id: run-plan
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}

      - name: Log Error
        if: ${{ steps.run-plan.plan_status }} == "Error"
        run: |
          echo "An error occurred in the previous step." >> "$GITHUB_OUTPUT"
          echo "The error message was: ${{ steps.run-plan.outcome }}" >> "$GITHUB_OUTPUT"
          echo "run_status: ${{ steps.run-plan.outputs.run_status }}" >> "$GITHUB_OUTPUT"
          payload=toJSON${{steps.run-plan.outputs.payload}}
          echo $payload >> "$GITHUB_OUTPUT"

      - name: Catch Error   
        if: ${{ steps.run-plan.plan_status }} == "Error"
        run: | 
          exit 1

      - uses: ./.github/actions/tfc-workflows-github/actions/plan-output
        name: Get plan output
        id: plan-output
        with:
          plan: ${{ steps.run-plan.outputs.plan_id }}
        
      - name: Reference plan output
        run: |
          echo "Plan status: ${{ steps.plan-output.outputs.plan_status }}"
          echo "Resources to Add: ${{ steps.plan-output.outputs.add }}"
          echo "Resources to Change: ${{ steps.plan-output.outputs.change }}"
          echo "Resources to Destroy: ${{ steps.plan-output.outputs.destroy }}"

      - uses: ./.github/actions/tfc-workflows-github/actions/apply-run/
        name: Run Terraform Apply
        id: apply
        with:
          run: ${{ steps.run-plan.outputs.run_id }}
          comment: "Confirmed from GitHub Actions CI"

      - uses: ./.github/actions/tfc-workflows-github/actions/show-run
        name: Show run output
        id: show-run
        with:
          run: ${{ steps.apply.outputs.run_id }}
      - run: |
          echo "Latest Run Status: ${{ steps.show-run.outputs.run_status }}"